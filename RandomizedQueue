import edu.princeton.cs.algs4.StdRandom;


import java.util.Iterator;
import java.util.NoSuchElementException;

public class RandomizedQueue<Item> implements Iterable<Item> {

    private Item[] randomizedQueue;
    private int numberOfItem = 0;

    // construct an empty randomized queue
    public RandomizedQueue() {
        randomizedQueue = (Item[]) new Object[1];
    }

    // is the randomized queue empty?
    public boolean isEmpty() {
        return numberOfItem == 0;
    }

    // return the number of items on the randomized queue
    public int size() {
        return numberOfItem;
    }

    // add the item
    public void enqueue(Item item) {
        if(item == null) {
            throw new IllegalArgumentException();
        }
        if (numberOfItem + 1 == randomizedQueue.length) {
            Item[] copy = randomizedQueue;
            randomizedQueue = (Item[]) new Object[2 * randomizedQueue.length];
            System.arraycopy(copy,0,randomizedQueue,0,numberOfItem);
        }
        randomizedQueue[numberOfItem] = item;
        numberOfItem++;

    }

    // remove and return a random item
    public Item dequeue() {
        if (numberOfItem == 0) {
            throw new NoSuchElementException();
        }
        int rd = StdRandom.uniform(numberOfItem);
        Item deQ = randomizedQueue[rd];
        if (numberOfItem - rd >= 0) System.arraycopy(randomizedQueue, rd + 1, randomizedQueue, rd, numberOfItem - rd);
        numberOfItem--;
        return deQ;
    }

    // return a random item (but do not remove it)
    public Item sample() {
        if (numberOfItem == 0) {
            throw new NoSuchElementException();
        }
        int rd = StdRandom.uniform(numberOfItem);
        return randomizedQueue[rd];
    }

    // return an independent iterator over items in random order
    public Iterator<Item> iterator() {
        return new RandomQIterator();
    }

    private class RandomQIterator implements Iterator<Item> {
        private final int order = StdRandom.uniform(numberOfItem);
        private Item current = randomizedQueue[order];


        public boolean hasNext() {
            return current != null;
        }

        public void remove() {
            throw new UnsupportedOperationException();
        }

        public Item next() {
            if (current == null) {
                throw new NoSuchElementException();
            }
            Item result = current;
            current = randomizedQueue[StdRandom.uniform(order + 1)];
            return result;
        }
    }



    // unit testing (required)
    public static void main(String[] args) {
        RandomizedQueue<Integer> rdQ = new RandomizedQueue<>();
        for (int i = 0; i < 10; i++) {
            rdQ.enqueue(i);
        }
        System.out.println(rdQ.size());
        for (int i = 0; i < 10; i++) {
            System.out.println(rdQ.sample());
        }
        for (int i = 0; i < 10; i++) {
            System.out.println(rdQ.dequeue());
        }
        System.out.println(rdQ.size());

    }


}
